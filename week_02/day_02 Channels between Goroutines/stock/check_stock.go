package main

import (
	"fmt"
	"math/rand"
	"time"
)

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå stock
type StockResult struct {
	Warehouse string
	Available int
}

// mock function ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stock ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á
func checkStock(warehouse string, itemCode string, ch chan<- StockResult) {
	// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô query database)
	time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)

	// mock stock value (random 0-100)
	available := rand.Intn(100)

	// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö channel
	ch <- StockResult{
		Warehouse: warehouse,
		Available: available,
	}
}

func main() {
	itemCode := "ABC123"
	warehouses := []string{"Warehouse A", "Warehouse B", "Warehouse C"}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå stock
	ch := make(chan StockResult)

	fmt.Println("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:", itemCode)

	// ‡∏î‡∏∂‡∏á stock ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
	for _, wh := range warehouses {
		go checkStock(wh, itemCode, ch)
	}

	// ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	for i := 0; i < len(warehouses); i++ {
		result := <-ch
		fmt.Printf("‚úÖ %s ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà: %d ‡∏ä‡∏¥‡πâ‡∏ô\n", result.Warehouse, result.Available)
	}

}
