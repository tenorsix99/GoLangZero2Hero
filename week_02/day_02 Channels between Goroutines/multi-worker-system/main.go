package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Job = ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà worker ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
type Job struct {
	ID       int
	TaskName string
}

// Result = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å job ‡πÄ‡∏™‡∏£‡πá‡∏à
type Result struct {
	JobID    int
	TaskName string
	Success  bool
}

// worker ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
func worker(id int, jobs <-chan Job, notify chan<- Result, wg *sync.WaitGroup) {
	defer wg.Done()

	for job := range jobs {
		fmt.Printf("üë∑‚Äç‚ôÇÔ∏è Worker %d: ‡∏ó‡∏≥ %s (JobID: %d)\n", id, job.TaskName, job.ID)

		time.Sleep(time.Millisecond * time.Duration(rand.Intn(500))) // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
		success := rand.Intn(10) != 0                                // 10% fail

		fmt.Printf("‚úÖ Worker %d: ‡πÄ‡∏™‡∏£‡πá‡∏à %s (%v)\n", id, job.TaskName, success)

		// ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
		notify <- Result{
			JobID:    job.ID,
			TaskName: job.TaskName,
			Success:  success,
		}
	}
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (consumer)
func notificationService(notify <-chan Result, done chan<- bool) {
	for result := range notify {
		if result.Success {
			fmt.Printf("üì£ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏á‡∏≤‡∏ô %s ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (JobID: %d)\n", result.TaskName, result.JobID)
		} else {
			fmt.Printf("‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏á‡∏≤‡∏ô %s ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (JobID: %d)\n", result.TaskName, result.JobID)
		}
	}
	done <- true // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
}

func main() {
	const numJobs = 10
	const numWorkers = 3

	jobs := make(chan Job, numJobs)
	notify := make(chan Result, numJobs)
	done := make(chan bool)

	var wg sync.WaitGroup

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á worker
	for w := 1; w <= numWorkers; w++ {
		wg.Add(1)
		go worker(w, jobs, notify, &wg)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Goroutine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
	go notificationService(notify, done)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô
	for j := 1; j <= numJobs; j++ {
		jobs <- Job{
			ID:       j,
			TaskName: fmt.Sprintf("‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô %d", j),
		}
	}
	close(jobs) // ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô

	wg.Wait()     // ‡∏£‡∏≠‡πÉ‡∏´‡πâ worker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
	close(notify) // ‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö
	<-done        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à

	fmt.Println("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
}
