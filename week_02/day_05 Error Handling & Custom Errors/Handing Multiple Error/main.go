// üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:
// Client Request ‚Üí Go service
//                 ‚îú‚îÄ call API A
//                 ‚îú‚îÄ call API B
//                 ‚îî‚îÄ call API C
// ‚ùó ‡∏ñ‡πâ‡∏≤ API ‡πÉ‡∏î API ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞ ‚Äú‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡∏¢‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äúretry‚Äù

// ‚úÖ ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ API

// ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å error ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
// ‚úÖ 2. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° error ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô (Go 1.20+)
// ‚úÖ 3. ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö parallel ‡∏î‡πâ‡∏ß‡∏¢ Goroutine + channel + select
// ‚úÖ 4. Retry ‡πÄ‡∏°‡∏∑‡πà‡∏≠ error ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö recoverable (‡πÄ‡∏ä‡πà‡∏ô timeout)

// ‚úÖ ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á:
// 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Primary API (/delay/3) ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤
// 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô timeout ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏á ‚Üí Retry 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
// 3. ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏û‡∏±‡∏á ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Fallback API (/uuid) ‡πÅ‡∏ó‡∏ô

// üîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î Go (‡∏û‡∏£‡πâ‡∏≠‡∏° Retry + Fallback)

package main

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"time"
)

func callAPI(ctx context.Context, url string) (string, error) {
	req, _ := http.NewRequestWithContext(ctx, "GET", url, nil)
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	body, _ := io.ReadAll(resp.Body)
	return string(body), nil
}

func callWithRetry(ctx context.Context, url string, maxRetry int) (string, error) {
	var lastErr error
	for i := 1; i <= maxRetry; i++ {
		fmt.Printf("üîÅ Attempt %d: Calling %s\n", i, url)

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ö‡∏ö timeout
		subCtx, cancel := context.WithTimeout(ctx, 2*time.Second)
		defer cancel()

		data, err := callAPI(subCtx, url)
		if err == nil {
			return data, nil
		}
		fmt.Println("‚ö†Ô∏è  Error:", err)
		lastErr = err

		time.Sleep(500 * time.Millisecond) // delay ‡∏Å‡πà‡∏≠‡∏ô retry
	}
	return "", fmt.Errorf("retry failed: %w", lastErr)
}

func main() {
	ctx := context.Background()

	// üß™ API ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà delay 3 ‡∏ß‡∏¥ (‡∏à‡∏∞ timeout)
	primaryURL := "https://httpbin.org/delay/1"
	fallbackURL := "https://httpbin.org/uuid"

	fmt.Println("üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏´‡∏•‡∏±‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° retry...")
	result, err := callWithRetry(ctx, primaryURL, 3)
	if err != nil {
		fmt.Println("‚ùå Primary ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fallback")

		// üõü fallback ‡∏ñ‡πâ‡∏≤ API ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏á
		data, err2 := callAPI(ctx, fallbackURL)
		if err2 != nil {
			fmt.Println("‚ùå Fallback ‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err2)
			return
		}
		fmt.Println("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å fallback:\n", data)
		return
	}

	fmt.Println("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏≤‡∏Å primary API:\n", result)
}
