; üéØ ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
; 1. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏ö‡∏ö Go (if err != nil)
; 2. ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á custom error
; 3. ‡∏Å‡∏≤‡∏£ wrap error ‡∏î‡πâ‡∏ß‡∏¢ fmt.Errorf ‡πÅ‡∏•‡∏∞ errors.Join
; 4. ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ layer
; 5. ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ sentinel error

; ‚úÖ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞ log error ‡∏ó‡∏µ‡πà‡∏î‡∏µ (Best Practices)

üîπ 1. ‡πÉ‡∏ä‡πâ fmt.Errorf("%w", err) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ wrap context ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

; return fmt.Errorf("call API X failed: %w", err)

; ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ trace ‡∏¢‡πâ‡∏≠‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á error ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ errors.Is ‡∏´‡∏£‡∏∑‡∏≠ errors.Unwrap

üîπ 2. ‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô log ‡πÄ‡∏ä‡πà‡∏ô:
; URL ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
; HTTP Status
; Response Body (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)
; Retry count
; Time used
; Trace ID / Request ID

; log.WithFields(log.Fields{
; 	"url": url,
; 	"status": resp.StatusCode,
; 	"duration_ms": duration.Milliseconds(),
; 	"trace_id": traceID,
; }).Warnf("API call failed: %v", err)

üîπ 3. ‡∏≠‡∏¢‡πà‡∏≤ log error ‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î
; Logging ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡πà‡∏ô controller ‡∏´‡∏£‡∏∑‡∏≠ handler)
; ‡∏™‡πà‡∏ß‡∏ô logic ‡∏ä‡∏±‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏£ wrap error ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÄ‡∏â‡∏¢ ‡πÜ

; // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£ log ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πâ‡∏ô
; func callService() error {
; 	resp, err := http.Get("...")
; 	if err != nil {
; 		return fmt.Errorf("error calling service: %w", err)
; 	}
; 	// ...
; 	return nil
; }

üîπ 4. ‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö log ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
; | log level | ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠                                         |
; | --------- | ------------------------------------------------ |
; | `Info`    | ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥                                |
; | `Warn`    | ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô retry ‡πÑ‡∏î‡πâ             |
; | `Error`   | ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏¢                     |
; | `Fatal`   | ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏±‡∏á ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÉ‡∏ô HTTP handler) |


üîπ 5. ‡πÉ‡∏™‡πà request context/trace ID ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å log
; ctx := context.WithValue(r.Context(), "trace_id", "abc-123")
; ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô log:
; log.WithField("trace_id", ctx.Value("trace_id")).Error("API failed")

üõ† ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Middleware ‡πÉ‡∏™‡πà Trace ID
; func withTraceID(next http.Handler) http.Handler {
; 	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
; 		traceID := uuid.NewString()
; 		ctx := context.WithValue(r.Context(), "trace_id", traceID)
; 		log.WithField("trace_id", traceID).Info("üîç Incoming request")

; 		next.ServeHTTP(w, r.WithContext(ctx))
; 	})
; }

‚úÖ ‡∏™‡∏£‡∏∏‡∏õ Checklist ‡∏Å‡∏≤‡∏£ log error ‡∏à‡∏≤‡∏Å API
 ‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î context (URL, status, timing, traceID)
 ‡πÉ‡∏ä‡πâ %w ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error wrapping
 ‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö log ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
 ‡πÑ‡∏°‡πà log ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ layer
 ‡πÉ‡∏™‡πà request ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠ trace logs ‡∏Ç‡πâ‡∏≤‡∏° service
 ‡πÉ‡∏ä‡πâ structured logger (‡πÄ‡∏ä‡πà‡∏ô logrus, zerolog, slog)