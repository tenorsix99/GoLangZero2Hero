// üß† ‡πÇ‡∏à‡∏ó‡∏¢‡πå: Service A ‚Üí B ‚Üí C ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
// Service A: ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å main()
// Service B: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// Service C: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ ‡∏ñ‡πâ‡∏≤ timeout ‚Üí ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
// ‡πÉ‡∏ä‡πâ context.WithTimeout() ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà A ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á C

// ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î (‡∏à‡∏≥‡∏•‡∏≠‡∏á context propagation)

package main

import (
	"context"
	"fmt"
	"math/rand"
	"time"
)

func main() {
	// ‚úÖ A: ‡πÄ‡∏£‡∏¥‡πà‡∏° context ‡∏ó‡∏µ‡πà timeout 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
	defer cancel()

	fmt.Println("üöÄ Service A: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
	err := serviceB(ctx)
	if err != nil {
		fmt.Println("‚ùå Service A: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err)
	} else {
		fmt.Println("‚úÖ Service A: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
	}
}

// ‚úÖ B: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á context ‡πÑ‡∏õ‡∏¢‡∏±‡∏á C
func serviceB(ctx context.Context) error {
	fmt.Println("‚û°Ô∏è Service B: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service C")

	result, err := serviceC(ctx)
	if err != nil {
		return fmt.Errorf("Service B: C ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: %w", err)
	}

	fmt.Println("üì¶ Service B: ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", result)
	return nil
}

// ‚úÖ C: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô
func serviceC(ctx context.Context) (string, error) {
	delay := time.Duration(rand.Intn(4)) * time.Second
	fmt.Printf("üïê Service C: ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ %v\n", delay)

	select {
	case <-time.After(delay): // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
		return "üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Service C", nil
	case <-ctx.Done():
		return "", fmt.Errorf("‚è∞ ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: %v", ctx.Err())
	}
}
